from telebot import types
from telebot.apihelper import ApiException
import config
import telebot
import requests
from bs4 import BeautifulSoup
from googletrans import Translator


bot = telebot.TeleBot(config.TOKEN, parse_mode="html")


@bot.message_handler(commands=["start"])
def helping(message):
    bot.send_message(message.chat.id, """
    –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç —Å–ª–µ–Ω–≥–µ—Ä–±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∂–∞—Ä–≥–æ–Ω–æ–≤. 
    
    ‚Ä¢ –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è, –ø—Ä–æ–ø–∏—à–∏ /launch. 
    
    ‚Ä¢ –ï—Å–ª–∏ –Ω–∞—à—ë–ª –∫–∞–∫–æ–π-—Ç–æ –±–∞–≥, –¥–æ–ª–±–∏ —Ä–∞–∑—Ä–∞–±–∞ –≤ –ª–∏—á–∫—É: @kurzwei777. 
    
    ‚Ä¢ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ - –ø—Ä–æ–ø–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–∏–∂–µ. 
    
    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ —é–∑–µ—Ä-—ç–∫—Å–ø–µ—Ä–∏–µ–Ω—Å–∞ :)""")
    bot.send_photo(message.chat.id, 'https://i.ibb.co/N33r9wy/photo5222236343227232739.jpg')


@bot.message_handler(commands=["launch"])
def starting_program(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    button_english = types.KeyboardButton(text="English üá∫üá∏")
    button_russian = types.KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
    keyboard.add(button_english, button_russian)
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É/—Ñ—Ä–∞–∑–µ?",
                     reply_markup=keyboard)


@bot.message_handler(content_types=["text"])
def selecting_language(message):
    if message.text == "English üá∫üá∏":
        message = bot.send_message(message.chat.id, "Write your phrase or word: ")
        bot.register_next_step_handler(message, slanger_function_eng)
    elif message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫":
        message = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–ª–æ–≤–æ: ")
        bot.register_next_step_handler(message, slanger_function_rus)


@bot.message_handler(content_types=["text"])
def slanger_function_rus(message):
    translate = Translator()
    get_message = message.text.strip().lower()
    set_param = {'term': get_message}
    url = "https://www.urbandictionary.com/define.php"
    headers = {
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/81.0.4044.138 Safari/537.36 OPR/68.0.3618.191',
        'accept': '*/*'}
    html = requests.get(url, headers=headers, params=set_param)
    if html.status_code == 200:
        soup = BeautifulSoup(html.text, "lxml")
        meaning = soup.select('div .meaning')[0].text
        example = soup.select('div .example')[0].text
        translation_of_meaning = translate.translate(meaning, dest="ru").text
        translation_of_example = translate.translate(example, dest="ru").text
        try:
            bot.send_message(message.chat.id, "<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ</b>:\n" + translation_of_meaning)
        except ApiException:
            bot.send_message(message.chat.id,
                             '–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ - —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: '
                             'https://translate.google.com/translate?hl=en&sl=auto&tl=ru&u=https%3A%2F%2Fwww'
                             f'.urbandictionary.com%2Fdefine.php%3Fterm%3D{get_message}&sandbox=1')
        if len(translation_of_example) > 0:
            bot.send_message(message.chat.id, "<b>–ü—Ä–∏–º–µ—Ä</b>:\n" + translation_of_example)
        else:
            bot.send_message(message.chat.id, "<b>–ü—Ä–∏–º–µ—Ä</b>:\n" + '–ó–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–∞')
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ üôÅ")
    returning_keyboard_rus = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    button_da = types.KeyboardButton(text="–î–∞")
    button_net = types.KeyboardButton(text="–ù–µ—Ç")
    returning_keyboard_rus.add(button_da, button_net)
    bot.send_message(message.chat.id, "<i>–ë—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?</i>",
                     reply_markup=returning_keyboard_rus)
    bot.register_next_step_handler(message, returning_back)


@bot.message_handler(content_types=["text"])
def slanger_function_eng(message):
    get_message = message.text.strip().lower()
    set_param = {'term': get_message}
    url = "https://www.urbandictionary.com/define.php"
    headers = {
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/81.0.4044.138 Safari/537.36 OPR/68.0.3618.191',
        'accept': '*/*'}
    html = requests.get(url, headers=headers, params=set_param)
    if html.status_code == 200:
        soup = BeautifulSoup(html.text, "lxml")
        meaning = soup.select('div .meaning')[0].text
        example = soup.select('div .example')[0].text
        try:
            bot.send_message(message.chat.id, "<b>Definition</b>:\n" + meaning)
        except ApiException:
            bot.send_message(message.chat.id,
                             'The definition is too long, check the website: '
                             'https://www.urbandictionary.com/define.php?term=' + get_message)
        if len(example) > 0:
            bot.send_message(message.chat.id, "<b>Example</b>:\n" + example)
        else:
            bot.send_message(message.chat.id, "<b>Example</b>:\n" + 'There\'s no example')
    else:
        bot.send_message(message.chat.id, "No such word/phrase in database üôÅ")
    returning_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    button_yes = types.KeyboardButton(text="Yes")
    button_no = types.KeyboardButton(text="No")
    returning_keyboard.add(button_yes, button_no)
    bot.send_message(message.chat.id, "<i>Do you wanna translate something else?</i>",
                     reply_markup=returning_keyboard)
    bot.register_next_step_handler(message, returning_back)


@bot.message_handler(content_types=["text"])
def returning_back(message):
    if message.text == "Yes":
        bot.send_message(message.chat.id, "Okay, returning back")
        starting_program(message)
    elif message.text == "No":
        bot.send_message(message.chat.id, """See you soon, cuz 

To start me again, 
just type /launch.

To get some help, 
just type /start.""")
    elif message.text == "–î–∞":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
        starting_program(message)
    elif message.text == "–ù–µ—Ç":
        bot.send_message(message.chat.id, """–£–≤–∏–¥–∏–º—Å—è, –±—Ä–∞–∑–∞ 

–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è —Å–Ω–æ–≤–∞, 
–ø—Ä–æ–ø–∏—à–∏ /launch

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –ø–æ –±–æ—Ç—É, 
–ø—Ä–æ–ø–∏—à–∏ /start""")


if __name__ == '__main__':
    bot.infinity_polling()
